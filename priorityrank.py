import networkx as nx
import numpy as np

from typing import List
from collections import Counter

from rankers import RandomRanker, EmbeddingRanker, DegreeRanker
from utils import compare_graphs


class PriorityRank:
    """
    Implements the priority attachment mechanism for generating artificial networks
    """
    def __init__(self, graph: nx.Graph, ranker: object):
        self.graph = graph
        self.ranker = ranker(graph)

    def get_rank_probabilities(self, n: int) -> List[float]:
        """
        Generates the list of probabilities for a given length of ranking

        :param n: length of the ranking
        :returns a list of diminishing probabilities
        """
        ranks = [1 / i for i in range(1, n + 1)]

        return [r / sum(ranks) for r in ranks]

    def generate(self):
        """
        Generates an artificial network based on the empirical input network

        :returns artificial network generated by the priority attachment mechanism
        """

        g = nx.Graph()
        g.add_nodes_from(self.graph.nodes)

        num_nodes = g.number_of_nodes()

        degree_sequence = sorted([d for n, d in self.graph.degree()])
        degree_count = Counter(degree_sequence)
        deg, cnt = zip(*degree_count.items())

        degree_probs = [c / sum(cnt) for c in cnt]

        for i in range(num_nodes):
            num_edges = np.random.choice(a=deg, p=degree_probs)
            ranking = self.ranker.get_ranking(i)
            probs = self.get_rank_probabilities(len(ranking))
            target_nodes = np.random.choice(a=ranking, p=probs, size=num_edges, replace=False)

            for j in target_nodes:
                g.add_edge(i, j)

        return g


if __name__ == '__main__':

    num_tries = 10

    graphs = []

    g = nx.erdos_renyi_graph(n=100, p=0.05)
    pr = PriorityRank(g, DegreeRanker)

    for i in range(num_tries):
        graphs.append(pr.generate())

    for k,v in compare_graphs(g, graphs).items():
        print(k, v)